type TerneuzenContact @model @auth(rules: [
  { allow: groups, groups: ["TerneuzenAdmin"], operations: [create, read, update, delete] },
  { allow: groups, groups: ["TerneuzenReadOnly"], operations: [read] }
]) {
  id: ID!
  email: String!
  phone: String!
  name: String!
  onCall: Boolean!
}

type ITContact @model @auth(rules: [
  { allow: groups, groups: ["ITAdmin"], operations: [create, read, update, delete] },
  { allow: groups, groups: ["ITReadOnly"], operations: [read] }
]) {
  id: ID!
  email: String!
  phone: String!
  name: String!
  onCall: Boolean!
}

type TerneuzenOnCallEntry @model @auth(rules: [
  { allow: groups, groups: ["TerneuzenAdmin"], operations: [create, read, update, delete] },
  { allow: groups, groups: ["TerneuzenReadOnly"], operations: [read] }
]) {
  id: ID!
  groupName: String!
  day: String!
  contactID: ID
  contact: TerneuzenContact @hasOne(fields: ["contactID"])
  phone: String
  timezone: String
  startTime: String
}

type ITOnCallEntry @model @auth(rules: [
  { allow: groups, groups: ["ITAdmin"], operations: [create, read, update, delete] },
  { allow: groups, groups: ["ITReadOnly"], operations: [read] }
]) {
  id: ID!
  groupName: String! #Always "IT"
  day: String!
  contactID: ID
  contact: ITContact @hasOne(fields: ["contactID"])
  phone: String
  timezone: String
  startTime: String
}

# Input types (Keep these largely the same, only necessary changes)
input CreateTerneuzenOnCallEntryInput {
  groupName: String!
  day: String!
  contactID: ID
  phone: String
  timezone: String
  startTime: String
}

input UpdateTerneuzenOnCallEntryInput {
  id: ID!
  groupName: String
  day: String
  contactID: ID
  phone: String
  timezone: String
  startTime: String
}

input CreateITOnCallEntryInput {
  groupName: String!
  day: String!
  contactID: ID
  phone: String
  timezone: String
  startTime: String
}

input UpdateITOnCallEntryInput {
  id: ID!
  groupName: String
  day: String
  contactID: ID
  phone: String
  timezone: String
  startTime: String
}
